from typing import TYPE_CHECKING, Callable, List, Tuple, Any

if TYPE_CHECKING:
    from ..authorization import AuthorizationResponse, Policy, Gate as GateObject

class Gate:
    """Gate facade."""

    def define(self, permission: str, condition: Callable): ...
    def register_policies(self, policies: List[Tuple[Any, Policy]]) -> "Gate": ...
    def get_policy_for(self, instance_or_class: "str|Any") -> "None|Policy": ...
    def before(self, before_callback: Callable): ...
    def after(self, after_callback: Callable): ...
    def allows(self, permission: str, *args) -> bool: ...
    def denies(self, permission, *args) -> bool: ...
    def has(self, permission: str) -> bool: ...
    def for_user(self, user: Any) -> GateObject: ...
    def any(self, permissions: List[str], *args) -> bool:
        """Check that every of those permissions are allowed."""
        ...
    def none(self, permissions: List[str], *args) -> bool:
        """Check that none of those permissions are allowed."""
        ...
    def authorize(self, permission: str, *args) -> bool: ...
    def inspect(self, permission: str, *args) -> "bool|AuthorizationResponse":
        """Get permission checks results for the given user then builds and returns an
        authorization response."""
        ...
    def check(self, permission: str, *args):
        """The core of the authorization class. Run before() checks, permission check and then
        after() checks."""
        ...